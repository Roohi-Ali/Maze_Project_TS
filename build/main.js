/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/index.ts":
/*!**********************!*\
  !*** ./src/index.ts ***!
  \**********************/
/***/ (() => {

eval("\nconst canvas = document.querySelector(\"canvas\");\nlet c = canvas.getContext(\"2d\");\nlet ctx = c;\nlet boy = new Image();\nboy.src = \"../build/boy.png\";\nlet home = new Image();\nhome.src = \"../build/house.png\";\nlet count = 0;\nlet raf;\nlet current;\nclass Maze {\n    constructor(size, rows, columns) {\n        this.size = size;\n        this.rows = rows;\n        this.columns = columns;\n        this.grid = [];\n        this.stack = [];\n        this.player = new Player(size, rows);\n    }\n    setup() {\n        for (let r = 0; r < this.rows; r++) {\n            let row = [];\n            for (let c = 0; c < this.columns; c++) {\n                let cell = new Cell(this.size, this.grid, this.rows, this.columns, r, c);\n                row.push(cell);\n            }\n            this.grid.push(row);\n        }\n        current = this.grid[0][0];\n        //call DFS algo\n        this.new_DFS();\n        //call draw_maze function\n        this.draw_maze();\n        this.player.draw();\n    }\n    draw_maze() {\n        canvas.width = this.size;\n        canvas.height = this.size;\n        canvas.style.backgroundColor = \"black\";\n        this.grid.forEach((row) => {\n            row.forEach((cell) => {\n                cell.display_cell();\n            });\n        });\n    }\n    new_DFS() {\n        current = this.grid[0][0];\n        current.visited = true;\n        this.stack.push(current);\n        while (this.stack.length != 0) {\n            let next = current.getRandomNeighbour();\n            if (next != undefined) {\n                next.visited = true;\n                this.stack.push(current);\n                current.removeWalls(current, next);\n                current = next;\n            }\n            else {\n                //if neighbour is undefined, then backtrack\n                if (this.stack.length > 0) {\n                    current = this.stack.pop();\n                }\n                else if (this.stack.length == 0) {\n                    return;\n                }\n            }\n        }\n        let start_cell = this.grid[0][0];\n        let end_cell = this.grid[this.rows - 1][this.columns - 1];\n        start_cell.walls.topWall = false;\n        end_cell.walls.rightWall = false;\n    }\n    moveDown() {\n        let playerCellPos = this.grid[this.player.y][this.player.x];\n        if (playerCellPos.walls.bottomWall == false) {\n            ctx.clearRect(0, 0, 500, 500);\n            this.draw_maze();\n            this.player.move(1, 0);\n        }\n    }\n    moveUp() {\n        let playerCellPos = this.grid[this.player.y][this.player.x];\n        if (playerCellPos.walls.topWall == false) {\n            ctx.clearRect(0, 0, 500, 500);\n            this.draw_maze();\n            this.player.move(-1, 0);\n        }\n    }\n    moveRight() {\n        let playerCellPos = this.grid[this.player.y][this.player.x];\n        if (playerCellPos.walls.rightWall == false) {\n            ctx.clearRect(0, 0, 500, 500);\n            this.draw_maze();\n            this.player.move(0, 1);\n        }\n    }\n    moveLeft() {\n        let playerCellPos = this.grid[this.player.y][this.player.x];\n        if (playerCellPos.walls.leftWall == false) {\n            ctx.clearRect(0, 0, 500, 500);\n            this.draw_maze();\n            this.player.move(0, -1);\n        }\n    }\n}\nclass Cell {\n    //color;\n    constructor(parentSize, parentGrid, rows, cols, rowNum, colNum) {\n        this.parentSize = parentSize;\n        this.parentGrid = parentGrid;\n        this.rows = rows;\n        this.cols = cols;\n        this.rowNum = rowNum;\n        this.colNum = colNum;\n        this.size = parentSize / rows;\n        this.walls = {\n            topWall: true,\n            bottomWall: true,\n            leftWall: true,\n            rightWall: true\n        };\n        this.visited = false;\n        this.neighbours = [];\n        //this.color = \"red\";\n    }\n    setNeighbours() {\n        this.neighbours = [];\n        let x = this.colNum;\n        let y = this.rowNum;\n        let left = (x !== 0) ? this.parentGrid[y][x - 1] : undefined;\n        let right = (x !== (this.cols - 1)) ? this.parentGrid[y][x + 1] : undefined;\n        let top = (y !== 0) ? this.parentGrid[y - 1][x] : undefined;\n        let bottom = (y !== (this.rows - 1)) ? this.parentGrid[y + 1][x] : undefined;\n        if (left && (left.visited == false)) {\n            this.neighbours.push(left);\n        }\n        if (right && (right.visited == false)) {\n            this.neighbours.push(right);\n        }\n        if (top && (top.visited == false)) {\n            this.neighbours.push(top);\n        }\n        if (bottom && (bottom.visited == false)) {\n            this.neighbours.push(bottom);\n        }\n    }\n    getRandomNeighbour() {\n        this.setNeighbours();\n        if (this.neighbours.length == 0) {\n            return undefined;\n        }\n        ;\n        let rand = Math.floor(Math.random() * this.neighbours.length);\n        return this.neighbours[rand];\n    }\n    drawLine(fromX, fromY, toX, toY) {\n        ctx.lineWidth = 2;\n        ctx.strokeStyle = \"white\";\n        ctx.beginPath();\n        ctx.moveTo(fromX, fromY);\n        ctx.lineTo(toX, toY);\n        ctx.stroke();\n    }\n    drawWalls() {\n        //draw top wall\n        // let x = this.colNum*this.size;\n        // let y = this.rowNum*this.size;\n        let fromX = 0;\n        let fromY = 0;\n        let toX = 0;\n        let toY = 0;\n        if (this.walls.topWall) {\n            fromX = this.colNum * this.size;\n            fromY = this.rowNum * this.size;\n            toX = fromX + this.size;\n            toY = fromY;\n            this.drawLine(fromX, fromY, toX, toY);\n        }\n        if (this.walls.bottomWall) {\n            fromX = this.colNum * this.size;\n            fromY = (this.rowNum * this.size) + this.size;\n            toX = fromX + this.size;\n            toY = fromY;\n            this.drawLine(fromX, fromY, toX, toY);\n        }\n        if (this.walls.leftWall) {\n            fromX = this.colNum * this.size;\n            fromY = this.rowNum * this.size;\n            toX = fromX;\n            toY = fromY + this.size;\n            this.drawLine(fromX, fromY, toX, toY);\n        }\n        if (this.walls.rightWall) {\n            fromX = (this.colNum * this.size) + this.size;\n            fromY = this.rowNum * this.size;\n            toX = fromX;\n            toY = fromY + this.size;\n            this.drawLine(fromX, fromY, toX, toY);\n        }\n    }\n    // highlight(){\n    //     ctx.fillStyle = \"red\";\n    //     ctx.fillRect((this.colNum*this.size)+1,(this.rowNum*this.size)+1,this.size-2,this.size-2);  \n    // }\n    display_cell() {\n        this.drawWalls();\n        //ctx.fillStyle = this.color;\n        ctx.fillRect((this.colNum * this.size) + 1, (this.rowNum * this.size) + 1, this.size - 2, this.size - 2);\n    }\n    removeWalls(cell_1, cell_2) {\n        let XDiff = cell_2.colNum - cell_1.colNum;\n        let YDiff = cell_2.rowNum - cell_1.rowNum;\n        if (XDiff == 1) {\n            //remove cell1.rightWall cell2.leftWall\n            cell_1.walls.rightWall = false;\n            cell_2.walls.leftWall = false;\n        }\n        else if (XDiff == -1) {\n            //remove cell1.leftWall cell2.rightWall\n            cell_1.walls.leftWall = false;\n            cell_2.walls.rightWall = false;\n        }\n        if (YDiff == 1) {\n            cell_1.walls.bottomWall = false;\n            cell_2.walls.topWall = false;\n        }\n        else if (YDiff == -1) {\n            cell_1.walls.topWall = false;\n            cell_2.walls.bottomWall = false;\n        }\n    }\n}\n// let maze = new Maze(500,10,10);\n// maze.setup();\n// maze.draw();\nlet maze;\nlet start_time;\nlet end_time;\nfunction initialiseMaze(size, r, c) {\n    maze = new Maze(size, r, c);\n    start_time = Date.now();\n    //maze.makeNullGrid();\n    maze.setup();\n    //maze.draw();\n}\nconst btn = document.getElementById(\"submit_level\");\nbtn.addEventListener(\"click\", selectLevel);\nfunction selectLevel() {\n    const sel = document.querySelector(\"#level\");\n    if (sel.value == \"easy\") {\n        initialiseMaze(500, 10, 10);\n    }\n    else if (sel.value == \"medium\") {\n        initialiseMaze(500, 20, 20);\n    }\n    else if (sel.value == \"hard\") {\n        initialiseMaze(600, 30, 30);\n    }\n}\nclass Player {\n    constructor(parentSize, rows) {\n        this.x = 0;\n        this.y = 0;\n        this.parentSize = parentSize;\n        this.rows = rows;\n        this.cols = rows; //since its a square maze\n        this.size = parentSize / rows;\n        this.hasWon = false;\n        this.lastCell = rows - 1;\n        this.boyIcon = new Image();\n        this.boyIcon.src = \"../build/boy.png\";\n        this.homeIcon = new Image();\n        this.homeIcon.src = \"../build/house.png\";\n        this.steps = 0;\n    }\n    move(row, col) {\n        this.y += row;\n        this.x += col;\n        this.steps++;\n        this.draw();\n    }\n    IsWon() {\n        if ((this.x == this.lastCell) && (this.y == this.lastCell)) {\n            this.hasWon = true;\n            displaySteps(this.steps);\n            toggleVisibility();\n        }\n    }\n    draw() {\n        // this.boyIcon.src = \"boy.png\";\n        // this.homeIcon.src = \"house.png\";\n        ctx.beginPath();\n        ctx.drawImage(this.boyIcon, this.x * this.size, this.y * this.size, this.size, this.size);\n        ctx.drawImage(this.homeIcon, this.lastCell * this.size, this.lastCell * this.size, this.size, this.size);\n        // ctx.fillStyle=  \"blue\";\n        // ctx.fillRect(this.x*this.size,this.y*this.size,this.size-2,this.size-2);\n        // ctx.fill();\n        ctx.stroke();\n        ctx.closePath();\n        this.IsWon();\n    }\n}\ndocument.onkeydown = function (event) {\n    switch (event.code) {\n        case \"ArrowDown\": //40       \n            maze.moveDown();\n            break;\n        case \"ArrowUp\": //38\n            maze.moveUp();\n            break;\n        case \"ArrowLeft\": //37\n            maze.moveLeft();\n            break;\n        case \"ArrowRight\": //39\n            maze.moveRight();\n            break;\n    }\n};\nconst playAgainbtn = document.querySelector(\".btn\");\nplayAgainbtn.addEventListener(\"click\", reload);\nconst buttonClose1 = document.querySelector(\"#close1\");\nbuttonClose1.addEventListener(\"click\", toggleVisibility);\nconst buttonClose2 = document.querySelector(\"#close2\");\nbuttonClose2.addEventListener(\"click\", toggleInstrModal);\nconst okbtn = document.querySelector(\"#okbtn\");\nokbtn.addEventListener(\"click\", toggleInstrModal);\nfunction displaySteps(steps) {\n    const p_steps = document.getElementById(\"p_steps\");\n    let time_taken = TimeElapsed();\n    let str = `You have taken ${steps} steps to complete the game<br> Time taken: ${time_taken} seconds`;\n    p_steps.innerHTML = str;\n    // \"You have taken \"+ steps + \" steps to complete the game.\"\n}\nfunction toggleVisibility() {\n    const modal = document.querySelector(\".winDiv\");\n    const overlay = document.querySelector(\".overlay\");\n    modal.classList.toggle(\"hidden\");\n    overlay.classList.toggle(\"hidden\");\n}\nfunction toggleInstrModal() {\n    const modal_instr = document.querySelector(\".instr\");\n    const overlay_instr = document.querySelector(\".overlay\");\n    modal_instr.classList.toggle(\"hidden\");\n    overlay_instr.classList.toggle(\"hidden\");\n}\nfunction TimeElapsed() {\n    end_time = Date.now();\n    let timeTaken = Math.floor((end_time - start_time) / 1000);\n    return timeTaken;\n}\nwindow.onload = () => {\n    initialiseMaze(500, 10, 10);\n    toggleInstrModal();\n    // const canvas = document.querySelector(\"canvas\") as HTMLCanvasElement\n    // let c = canvas.getContext(\"2d\");\n};\nfunction reload() {\n    location.reload();\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/index.ts\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/index.ts"]();
/******/ 	
/******/ })()
;